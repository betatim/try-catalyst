(()=>{"use strict";function t(t){if("clipboard"in navigator)return navigator.clipboard.writeText(t.textContent);const e=getSelection();if(null==e)return Promise.reject(new Error);e.removeAllRanges();const o=document.createRange();return o.selectNodeContents(t),e.addRange(o),document.execCommand("copy"),e.removeAllRanges(),Promise.resolve()}function e(e){if("clipboard"in navigator)return navigator.clipboard.writeText(e);const o=document.body;if(!o)return Promise.reject(new Error);const n=function(t){const e=document.createElement("pre");return e.style.width="1px",e.style.height="1px",e.style.position="fixed",e.style.top="5px",e.textContent=t,e}(e);return o.appendChild(n),t(n),o.removeChild(n),Promise.resolve()}function o(o){const n=o.getAttribute("for"),r=o.getAttribute("value");function i(){o.dispatchEvent(new CustomEvent("clipboard-copy",{bubbles:!0}))}if(r)e(r).then(i);else if(n){const r="getRootNode"in Element.prototype?o.getRootNode():o.ownerDocument;if(!(r instanceof Document||"ShadowRoot"in window&&r instanceof ShadowRoot))return;const c=r.getElementById(n);c&&(s=c,s instanceof HTMLInputElement||s instanceof HTMLTextAreaElement?e(s.value):s instanceof HTMLAnchorElement&&s.hasAttribute("href")?e(s.href):t(s)).then(i)}var s}function n(t){const e=t.currentTarget;e instanceof HTMLElement&&o(e)}function r(t){if(" "===t.key||"Enter"===t.key){const e=t.currentTarget;e instanceof HTMLElement&&(t.preventDefault(),o(e))}}function i(t){t.currentTarget.addEventListener("keydown",r)}function s(t){t.currentTarget.removeEventListener("keydown",r)}class ClipboardCopyElement extends HTMLElement{constructor(){super(),this.addEventListener("click",n),this.addEventListener("focus",i),this.addEventListener("blur",s)}connectedCallback(){this.hasAttribute("tabindex")||this.setAttribute("tabindex","0"),this.hasAttribute("role")||this.setAttribute("role","button")}get value(){return this.getAttribute("value")||""}set value(t){this.setAttribute("value",t)}}window.customElements.get("clipboard-copy")||(window.ClipboardCopyElement=ClipboardCopyElement,window.customElements.define("clipboard-copy",ClipboardCopyElement));const c=new WeakSet;function a(t){u(t),d(t)}const l=new WeakMap;function d(t=document){if(l.has(t))return l.get(t);let e=!1;const o=new MutationObserver((t=>{for(const e of t)if("attributes"===e.type&&e.target instanceof Element)h(e.target);else if("childList"===e.type&&e.addedNodes.length)for(const t of e.addedNodes)t instanceof Element&&u(t)}));o.observe(t,{childList:!0,subtree:!0,attributeFilter:["data-action"]});const n={get closed(){return e},unsubscribe(){e=!0,l.delete(t),o.disconnect()}};return l.set(t,n),n}function u(t){for(const e of t.querySelectorAll("[data-action]"))h(e);t instanceof Element&&t.hasAttribute("data-action")&&h(t)}function f(t){const e=t.currentTarget;for(const o of p(e))if(t.type===o.type){const n=e.closest(o.tag);c.has(n)&&"function"==typeof n[o.method]&&n[o.method](t);const r=e.getRootNode();if(r instanceof ShadowRoot&&c.has(r.host)&&r.host.matches(o.tag)){const e=r.host;"function"==typeof e[o.method]&&e[o.method](t)}}}function*p(t){for(const e of(t.getAttribute("data-action")||"").trim().split(/\s+/)){const t=e.lastIndexOf(":"),o=e.lastIndexOf("#");yield{type:e.slice(0,t),tag:e.slice(t+1,o),method:e.slice(o+1)}}}function h(t){for(const e of p(t))t.addEventListener(e.type,f)}const b=new WeakMap;function m(t){return`data-${t.replace(/([A-Z]($|[a-z]))/g,"-$1")}`.replace(/--/g,"-").toLowerCase()}var g=function(t,e,o,n){var r,i=arguments.length,s=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,o,n);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(i<3?r(s):i>3?r(e,o,s):r(e,o))||s);return i>3&&s&&Object.defineProperty(e,o,s),s};let y=class HelloWorldElement extends HTMLElement{connectedCallback(){this.innerHTML="Hello World!",console.log("hellllooooooooo ðŸ‘‹")}};y=g([function(t){const e=t.prototype.connectedCallback;t.prototype.connectedCallback=function(){this.toggleAttribute("data-catalyst",!0),function(t){for(const e of t.querySelectorAll("template[data-shadowroot]"))e.parentElement===t&&t.attachShadow({mode:"closed"===e.getAttribute("data-shadowroot")?"closed":"open"}).append(e.content.cloneNode(!0))}(this),function(t,e){e||(e=b.get(Object.getPrototypeOf(t))||[]);for(const o of e){const e=t[o],n=m(o);let r={get(){return this.getAttribute(n)||""},set(t){this.setAttribute(n,t||"")}};"number"==typeof e?r={get(){return Number(this.getAttribute(n)||0)},set(t){this.setAttribute(n,t)}}:"boolean"==typeof e&&(r={get(){return this.hasAttribute(n)},set(t){this.toggleAttribute(n,t)}}),Object.defineProperty(t,o,r),o in t&&!t.hasAttribute(n)&&r.set.call(t,e)}}(this),function(t){c.add(t),t.shadowRoot&&a(t.shadowRoot),u(t),d(t.ownerDocument)}(this),e&&e.call(this),this.shadowRoot&&a(this.shadowRoot)},function(t){let e=t.observedAttributes||[];Object.defineProperty(t,"observedAttributes",{get(){const o=b.get(t.prototype);return o?o.map(m).concat(e):e},set(t){e=t}})}(t),function(t){const e=t.name.replace(/([A-Z]($|[a-z]))/g,"-$1").replace(/(^-|-Element$)/g,"").toLowerCase();window.customElements.get(e)||(window[t.name]=t,window.customElements.define(e,t))}(t)}],y)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,